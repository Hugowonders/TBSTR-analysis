sw <- mean(c(var(a, na.rm = T), var(b, na.rm = T)))
# total variance
st <- var(c(a, b), na.rm = T)
rst <- (st - sw)/st
# assign negative values as zero
rst[rst < 0] <- 0
return(rst)
}
# calculate Rst
rstPopAB <- map2(dosagePopA, dosagePopB,
function(a, b) {
nPopA <- NROW(a)
nPopB <- NROW(b)
# exclude pSTRs with missing rate > 0.5
if (is.na(a)/nPopA > 0.5 || is.na(b)/nPopB > 0.5) {
rst <- NA
} else {
# in population variance
sw <- mean(c(var(a, na.rm = T), var(b, na.rm = T)))
# total variance
st <- var(c(a, b), na.rm = T)
rst <- (st - sw)/st
# assign negative values as zero
rst[rst < 0] <- 0
return(rst)
}
})
a <- dosagePopA[, 1]
a
# load pSTR dosage of popA, rows are samples and columns are pSTR loci
dosagePopA <- read_tsv("./Demo/dosage_popa.txt.gz")
# load pSTR dosage of popA, rows are samples and columns are pSTR loci
dosagePopA <- fread("./Demo/dosage_popa.txt.gz") %>%
as.data.frame()
# load pSTR dosage of popB, rows are samples and columns are pSTR loci
dosagePopB <- fread("./Demo/dosage_popb.txt.gz") %>%
as.data.frame()
# calculate Rst
rstPopAB <- map2(dosagePopA, dosagePopB,
function(a, b) {
nPopA <- NROW(a)
nPopB <- NROW(b)
# exclude pSTRs with missing rate > 0.5
if (is.na(a)/nPopA > 0.5 || is.na(b)/nPopB > 0.5) {
rst <- NA
} else {
# in population variance
sw <- mean(c(var(a, na.rm = T), var(b, na.rm = T)))
# total variance
st <- var(c(a, b), na.rm = T)
rst <- (st - sw)/st
# assign negative values as zero
rst[rst < 0] <- 0
return(rst)
}
})
# calculate Rst
rstPopAB <- map2(dosagePopA, dosagePopB,
function(a, b) {
nPopA <- NROW(a)
nPopB <- NROW(b)
# exclude pSTRs with missing rate > 0.5
if ((is.na(a)/nPopA > 0.5) || (is.na(b)/nPopB > 0.5)) {
rst <- NA
} else {
# in population variance
sw <- mean(c(var(a, na.rm = T), var(b, na.rm = T)))
# total variance
st <- var(c(a, b), na.rm = T)
rst <- (st - sw)/st
# assign negative values as zero
rst[rst < 0] <- 0
return(rst)
}
})
# calculate Rst
rstPopAB <- map2(dosagePopA, dosagePopB,
function(a, b) {
nPopA <- NROW(a)
nPopB <- NROW(b)
# exclude pSTRs with missing rate > 0.5
if (sum(is.na(a))/nPopA > 0.5 || sum(is.na(b))/nPopB > 0.5) {
rst <- NA
} else {
# in population variance
sw <- mean(c(var(a, na.rm = T), var(b, na.rm = T)))
# total variance
st <- var(c(a, b), na.rm = T)
rst <- (st - sw)/st
# assign negative values as zero
rst[rst < 0] <- 0
return(rst)
}
})
rstPopAB
# calculate Rst
rstPopAB <- map2_dbl(dosagePopA, dosagePopB,
function(a, b) {
nPopA <- NROW(a)
nPopB <- NROW(b)
# exclude pSTRs with missing rate > 0.5
if (sum(is.na(a))/nPopA > 0.5 || sum(is.na(b))/nPopB > 0.5) {
rst <- NA
} else {
# in population variance
sw <- mean(c(var(a, na.rm = T), var(b, na.rm = T)))
# total variance
st <- var(c(a, b), na.rm = T)
rst <- (st - sw)/st
# assign negative values as zero
rst[rst < 0] <- 0
return(rst)
}
})
rstPopAB
sum(is.nan(rstPopAB))
sum(is.na(rstPopAB))
dosagePopA[, !is.nan(rstPopAB)] %>%
write_tsv("./Demo/dosage_popA.txt.gz")
dosagePopB[, !is.nan(rstPopAB)] %>%
write_tsv("./Demo/dosage_popB.txt.gz")
# load pSTR dosage of popA, rows are samples and columns are pSTR loci
dosagePopA <- fread("./Demo/dosage_popA.txt.gz") %>%
as.data.frame()
# load pSTR dosage of popB, rows are samples and columns are pSTR loci
dosagePopB <- fread("./Demo/dosage_popB.txt.gz") %>%
as.data.frame()
# calculate Rst
rstPopAB <- map2_dbl(dosagePopA, dosagePopB,
function(a, b) {
nPopA <- NROW(a)
nPopB <- NROW(b)
# exclude pSTRs with missing rate > 0.5
if (sum(is.na(a))/nPopA > 0.5 || sum(is.na(b))/nPopB > 0.5) {
rst <- NA
} else {
# in population variance
sw <- mean(c(var(a, na.rm = T), var(b, na.rm = T)))
# total variance
st <- var(c(a, b), na.rm = T)
rst <- (st - sw)/st
# assign negative values as zero
rst[rst < 0] <- 0
return(rst)
}
})
rstPopAB
sum(is.nan(rstPopAB))
sum(is.na(rstPopAB))
# calculate TRDS
trdsPopAB <- map2(dosagePopA, dosagePopB,
function(a, b) {
# exclude pSTRs with missing rate > 0.5
if (sum(is.na(a))/nPopA > 0.5 || sum(is.na(b))/nPopB > 0.5) {
trds <- NA
} else {
# in population variance
trds <- waddR::wasserstein.test(a, b, method = "ASY")
}
return(trds)
})
# calculate Rst
rstPopAB <- map2(dosagePopA, dosagePopB,
function(a, b) {
nPopA <- NROW(a)
nPopB <- NROW(b)
# exclude pSTRs with missing rate > 0.5
if (sum(is.na(a))/nPopA > 0.5 || sum(is.na(b))/nPopB > 0.5) {
rst <- NA
} else {
# in population variance
sw <- mean(c(var(a, na.rm = T), var(b, na.rm = T)))
# total variance
st <- var(c(a, b), na.rm = T)
rst <- (st - sw)/st
# assign negative values as zero
rst[rst < 0] <- 0
return(rst)
}
})
# calculate TRDS
trdsPopAB <- map2(dosagePopA, dosagePopB,
function(a, b) {
# exclude pSTRs with missing rate > 0.5
nPopA <- NROW(a)
nPopB <- NROW(b)
if (sum(is.na(a))/nPopA > 0.5 || sum(is.na(b))/nPopB > 0.5) {
trds <- NA
} else {
# in population variance
trds <- waddR::wasserstein.test(a, b, method = "ASY")
}
return(trds)
})
# calculate TRDS
trdsPopAB <- map2(dosagePopA, dosagePopB,
function(a, b) {
# exclude pSTRs with missing rate > 0.5
nPopA <- NROW(a)
nPopB <- NROW(b)
if (sum(is.na(a))/nPopA > 0.5 || sum(is.na(b))/nPopB > 0.5) {
trds <- NA
} else {
# in population variance
trds <- waddR::wasserstein.test(a, b, method = "ASY", na.rm = T)
}
return(trds)
})
# calculate TRDS
trdsPopAB <- map2(dosagePopA, dosagePopB,
function(a, b) {
# exclude pSTRs with missing rate > 0.5
nPopA <- NROW(a)
nPopB <- NROW(b)
if (sum(is.na(a))/nPopA > 0.5 || sum(is.na(b))/nPopB > 0.5) {
trds <- NA
} else {
# in population variance
trds <- wasserstein.test(na.omit(a), na.omit(b), method = "ASY")
}
return(trds)
})
# calculate TRDS
trdsPopAB <- map2(dosagePopA, dosagePopB,
function(a, b) {
# exclude pSTRs with missing rate > 0.5
nPopA <- NROW(a)
nPopB <- NROW(b)
if (sum(is.na(a))/nPopA > 0.5 || sum(is.na(b))/nPopB > 0.5) {
trds <- NA
} else {
# in population variance
trds <- waddR::wasserstein.test(na.omit(a), na.omit(b), method = "ASY")
}
return(trds)
})
trdsPopAB
dosagePopA
dosagePopA %>% write_tsv("./Demo/dosage_popA.txt.gz", col_names = F)
dosagePopB %>% write_tsv("./Demo/dosage_popB.txt.gz", col_names = F)
# load pSTR dosage of popA, rows are samples and columns are pSTR loci
dosagePopA <- fread("./Demo/dosage_popA.txt.gz") %>%
as.data.frame()
# load pSTR dosage of popB, rows are samples and columns are pSTR loci
dosagePopB <- fread("./Demo/dosage_popB.txt.gz") %>%
as.data.frame()
# calculate Rst
rstPopAB <- map2(dosagePopA, dosagePopB,
function(a, b) {
nPopA <- NROW(a)
nPopB <- NROW(b)
# exclude pSTRs with missing rate > 0.5
if (sum(is.na(a))/nPopA > 0.5 || sum(is.na(b))/nPopB > 0.5) {
rst <- NA
} else {
# in population variance
sw <- mean(c(var(a, na.rm = T), var(b, na.rm = T)))
# total variance
st <- var(c(a, b), na.rm = T)
rst <- (st - sw)/st
# assign negative values as zero
rst[rst < 0] <- 0
return(rst)
}
})
rstPopAB
pstrFlank500k <- fread("./Demo/chr21_pstrs_flanking_gene_500kb.txt.gz")
pstrFlank500k
# dosage matrix of MAGE samples
mageDosage <- fread("./Demo/chr21_mage_dosage.txt.gz")
mageDosage
mageDosage[, 1:10]
# gene expression matrix of MAGE samples (inverse normalized TMM)
mageInvNormTmm <- fread("./Demo/chr21_mage_inv_norm.txt.gz")
mageInvNormTmm
pstrFlank500k
length(unique(pstrFlank500k$id))
mageDosage[, 1:10]
# covariates of MAGE samples
magCovars <- fread("./Demo/mage_covariates.txt.gz")
doseGeneLm <- map2(names(mageDosage), mageDosage,
function(id, dos) {
genes <- unique(pstrFlank500k$geneID[pstrFlank500k$id == id])
pstrGeneCorPairs <- map(genes, function(g) {
dt <- cbind(mageInvNormTmm[, g, with = F], dos, mageCovars[, -1])
lmModel <- lm(expr(!!sym(g) ~ .), data = dt) %>%
broom::tidy() %>%
.[2, 2:5] %>%
mutate(site = id, geneID = g)
lmModel
}) %>%
reduce(rbind)
return(pstrGeneCorPairs)
}) %>%
reduce(rbind)
# covariates of MAGE samples
mageCovars <- fread("./Demo/mage_covariates.txt.gz")
doseGeneLm <- map2(names(mageDosage), mageDosage,
function(id, dos) {
genes <- unique(pstrFlank500k$geneID[pstrFlank500k$id == id])
pstrGeneCorPairs <- map(genes, function(g) {
dt <- cbind(mageInvNormTmm[, g, with = F], dos, mageCovars[, -1])
lmModel <- lm(expr(!!sym(g) ~ .), data = dt) %>%
broom::tidy() %>%
.[2, 2:5] %>%
mutate(site = id, geneID = g)
lmModel
}) %>%
reduce(rbind)
return(pstrGeneCorPairs)
}) %>%
reduce(rbind)
doseGeneLm
doseGeneLmAdj <- doseGeneLm %>%
.[, p.adj := p.adjust(p.value, method = "bonferroni"), by = "geneID"] %>%
.[p.adj < 0.05]
doseGeneLmAdj <- doseGeneLm %>%
as.data.table() %>%
.[, p.adj := p.adjust(p.value, method = "bonferroni"), by = "geneID"] %>%
.[p.adj < 0.05]
doseGeneLmAdj
eqtlSummary <- doseGeneLmAdj %>%
.[, .SD[which.min(p.adj)], by = "geneID"] %>%
.[, fdr := p.adjust(p.adj, method = "BH")] %>%
.[fdr < 0.05]
eqtlSummary
hipstrGeneCorPairs <- fread("./4_Funational_Analysis/1_eQTL/hipstr_gene_cor_pairs.txt.gz")
hipstrGeneEqtl <- fread("./4_Funational_Analysis/1_eQTL/hipstr_gene_eqtl.txt.gz")
View(hipstrGeneEqtl)
doseGeneLm
mageCovars
View(hipstrGeneCorPairs)
doseGeneLm
names(mageDosage)【1
names(mageDosage)[1]
id <- "chr21_5051774"
# test associatins across genes
genes <- unique(pstrFlank500k$geneID[pstrFlank500k$id == id])
genes
g <- genes[1]
# combine ancestry, sex, and PEER factors as covariants
dt <- cbind(mageInvNormTmm[, g, with = F], dos, mageCovars[, -1])
dos <- mageDosage[, 1]
# combine ancestry, sex, and PEER factors as covariants
dt <- cbind(mageInvNormTmm[, g, with = F], dos, mageCovars[, -1])
lmModel <- lm(expr(!!sym(g) ~ .), data = dt) %>%
# extract statistics
broom::tidy()
lmModel
dt
# pstr dosage matrix of MAGE samples
mageDosage <- fread("./Demo/chr21_mage_dosage.txt.gz") %>%
# zscore normalization
.[, lapply(.SD, scale)]
dos <- mageDosage[, 1]
# combine ancestry, sex, and PEER factors as covariants
dt <- cbind(mageInvNormTmm[, g, with = F], dos, mageCovars[, -1])
# perform LM regression: Y=Xβ+Wα+ϵ
lmModel <- lm(expr(!!sym(g) ~ .), data = dt) %>%
# extract statistics
broom::tidy() %>%
.[2, 2:5] %>%
mutate(site = id, geneID = g)
lmModel
mageInvNormTmm[, 1:5]
mageInvNormTmm <- fread("./Demo/chr21_mage_inv_norm.txt.gz") %>%
# random shuffling sample IDs
.[sample(1:NROW(.), NROW(.)), ]
mageInvNormTmm
mageDosage <- fread("./Demo/chr21_mage_dosage.txt.gz") %>%
# zscore normalization
.[, lapply(.SD, scale)] %>%
# random shuffling of sample IDs
.[sample(1:NROW(.), NROW(.)), ]
mageDosage
mageDosage <- fread("./Demo/chr21_mage_dosage.txt.gz")
mageDosage
mageDosage <- fread("./Demo/chr21_mage_dosage.txt.gz") %>%
# zscore normalization
.[, lapply(.SD, scale)]
mageDosage
mageDosage <- fread("./Demo/chr21_mage_dosage.txt.gz") %>%
# zscore normalization
.[, lapply(.SD, scale)] %>%
set_names(str_remove(names(.), ".V1$")) %>%
# random shuffling of sample IDs
.[sample(1:NROW(.), NROW(.)), ]
mageDosage
# repeat the association test
doseGeneLmShuffle <- map2(names(mageDosage), mageDosage,
function(id, dos) {
# test associatins across genes
genes <- unique(pstrFlank500k$geneID[pstrFlank500k$id == id])
# LM regression
pstrGeneCorPairs <- map(genes, function(g) {
# combine ancestry, sex, and PEER factors as covariants
dt <- cbind(mageInvNormTmm[, g, with = F], dos, mageCovars[, -1])
# perform LM regression: Y=Xβ+Wα+ϵ
lmModel <- lm(expr(!!sym(g) ~ .), data = dt) %>%
# extract statistics
broom::tidy() %>%
.[2, 2:5] %>%
mutate(site = id, geneID = g)
lmModel
}) %>%
reduce(rbind)
# return statistics for each pSTR-Gene pair
return(pstrGeneCorPairs)
}) %>%
# combine results across genes
reduce(rbind)
mageDosage
mageDosage[, 1:10]
# exclude pSTRs with missing rate > 0.5
siteFmiss <- map_dbl(mageDosage, ~sum(is.na(.x))/length(.x))
doseGeneLm <- map2(names(mageDosage[siteMatch]), mageDosage[siteMatch],
function(id, dos) {
# test associatins across genes
genes <- unique(pstrFlank500k$geneID[pstrFlank500k$id == id])
# LM regression
pstrGeneCorPairs <- map(genes, function(g) {
# combine ancestry, sex, and PEER factors as covariants
dt <- cbind(mageInvNormTmm[, g, with = F], dos, mageCovars[, -1])
# perform LM regression: Y=Xβ+Wα+ϵ
lmModel <- lm(expr(!!sym(g) ~ .), data = dt) %>%
# extract statistics
broom::tidy() %>%
.[2, 2:5] %>%
mutate(site = id, geneID = g)
lmModel
}) %>%
reduce(rbind)
# return statistics for each pSTR-Gene pair
return(pstrGeneCorPairs)
}) %>%
# combine results across genes
reduce(rbind)
siteMatch <- which(siteFmiss < 0.5)
doseGeneLm <- map2(names(mageDosage[siteMatch]), mageDosage[siteMatch],
function(id, dos) {
# test associatins across genes
genes <- unique(pstrFlank500k$geneID[pstrFlank500k$id == id])
# LM regression
pstrGeneCorPairs <- map(genes, function(g) {
# combine ancestry, sex, and PEER factors as covariants
dt <- cbind(mageInvNormTmm[, g, with = F], dos, mageCovars[, -1])
# perform LM regression: Y=Xβ+Wα+ϵ
lmModel <- lm(expr(!!sym(g) ~ .), data = dt) %>%
# extract statistics
broom::tidy() %>%
.[2, 2:5] %>%
mutate(site = id, geneID = g)
lmModel
}) %>%
reduce(rbind)
# return statistics for each pSTR-Gene pair
return(pstrGeneCorPairs)
}) %>%
# combine results across genes
reduce(rbind)
siteFmiss
doseGeneLm <- map2(names(mageDosage[, siteMatch]), mageDosage[, siteMatch],
function(id, dos) {
# test associatins across genes
genes <- unique(pstrFlank500k$geneID[pstrFlank500k$id == id])
# LM regression
pstrGeneCorPairs <- map(genes, function(g) {
# combine ancestry, sex, and PEER factors as covariants
dt <- cbind(mageInvNormTmm[, g, with = F], dos, mageCovars[, -1])
# perform LM regression: Y=Xβ+Wα+ϵ
lmModel <- lm(expr(!!sym(g) ~ .), data = dt) %>%
# extract statistics
broom::tidy() %>%
.[2, 2:5] %>%
mutate(site = id, geneID = g)
lmModel
}) %>%
reduce(rbind)
# return statistics for each pSTR-Gene pair
return(pstrGeneCorPairs)
}) %>%
# combine results across genes
reduce(rbind)
doseGeneLm <- map2(names(mageDosage[, siteMatch, with = F]),
mageDosage[, siteMatch, with = F],
function(id, dos) {
# test associatins across genes
genes <- unique(pstrFlank500k$geneID[pstrFlank500k$id == id])
# LM regression
pstrGeneCorPairs <- map(genes, function(g) {
# combine ancestry, sex, and PEER factors as covariants
dt <- cbind(mageInvNormTmm[, g, with = F], dos, mageCovars[, -1])
# perform LM regression: Y=Xβ+Wα+ϵ
lmModel <- lm(expr(!!sym(g) ~ .), data = dt) %>%
# extract statistics
broom::tidy() %>%
.[2, 2:5] %>%
mutate(site = id, geneID = g)
lmModel
}) %>%
reduce(rbind)
# return statistics for each pSTR-Gene pair
return(pstrGeneCorPairs)
}) %>%
# combine results across genes
reduce(rbind)
estrInfo <- fread("./Demo/Suppl/Suppl_Data3_pSTR_gene_association.txt.gz") %>%
.[eSTR == "Yes"]
estrInfo
estrInfo <- fread("./Demo/Suppl/Suppl_Data3_pSTR_gene_association.txt.gz") %>%
.[eSTR == "Yes", 1:3] %>%
set_names(c("chr", "start", "end"))
